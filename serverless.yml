# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: receipt-bank-db
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"
configValidationMode: error

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-1'}

  # you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:Get*"
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:DeleteItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:PutItem"
            - "dynamodb:BatchGet*"
            - "dynamodb:BatchWrite*"
          Resource:
            {
              "Fn::Join":
                [
                  ":",
                  [
                    "arn:aws:dynamodb",
                    { "Ref": AWS::Region },
                    { "Ref": AWS::AccountId },
                    "table/ReceiptBankDBTable",
                  ],
                ],
            }
        - Effect: "Allow"
          Action:
            - "dynamodb:Query"
            - "dynamodb:Scan"
          Resource:
            {
              "Fn::Join":
                [
                  ":",
                  [
                    "arn:aws:dynamodb",
                    { "Ref": AWS::Region },
                    { "Ref": AWS::AccountId },
                    "table/ReceiptBankDBTable/index/*",
                  ],
                ],
            }

  apiGateway:
    resourcePolicy:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource:
          - execute-api:/*/*/*
        Condition:
          IpAddress:
            aws:SourceIp: ${file(./config/.config.${opt:stage, 'dev'}.yml):ALLOW_IP_LIST}

  # you can define service wide environment variables here
  environment:
    REGION: ${opt:region, 'ap-northeast-1'}
    TABLE_NAME: "ReceiptBankDBTable"

plugins:
  - serverless-pseudo-parameters

# you can add packaging information here
package:
  patterns:
    - "!serverles.yml"
    - "!README.md"
    - "!package.json"
    - "!package-lock.json"
    - "!.eslintrc.json"
    - "!.npmignore"
    - "!config/**"
    - "!templates/**"
    - src/**

functions:
  bankTeller:
    handler: src/lambda/index.handler
    name: receipt-bank-teller-${self:provider.stage}
    # role: arn:aws:iam::#{AWS::AccountId}:role/BankTellerLambdaRole-${self:provider.stage}
    description: "API handler of receipt-bank-db"
    events:
      - http:
          path: v1/
          method: get
          cors: true
      - http:
          path: v1/customer/
          method: get
          cors: true
      - http:
          path: v1/customer/
          method: post
          cors: true
      - http:
          path: v1/customer/
          method: delete
          cors: true
      - http:
          path: v1/customer/list/
          method: get
          cors: true
      - http:
          path: v1/customer/email/
          method: get
          cors: true
      - http:
          path: v1/application/
          method: get
          cors: true
      - http:
          path: v1/application/
          method: post
          cors: true
      - http:
          path: v1/application/
          method: delete
          cors: true
      - http:
          path: v1/application/list/
          method: get
          cors: true
      - http:
          path: v1/customerapp/
          method: get
          cors: true
      - http:
          path: v1/customerapp/
          method: post
          cors: true
      - http:
          path: v1/customerapp/
          method: delete
          cors: true
      - http:
          path: v1/customerapp/list/
          method: get
          cors: true
      - http:
          path: v1/customerapp/app/
          method: get
          cors: true
      - http:
          path: v1/product/
          method: get
          cors: true
      - http:
          path: v1/product/
          method: post
          cors: true
      - http:
          path: v1/product/
          method: delete
          cors: true
      - http:
          path: v1/product/list/
          method: get
          cors: true
      - http:
          path: v1/product/list/
          method: delete
          cors: true
      - http:
          path: v1/authority/
          method: get
          cors: true
      - http:
          path: v1/authority/
          method: post
          cors: true
      - http:
          path: v1/authority/
          method: delete
          cors: true
      - http:
          path: v1/authority/list/
          method: get
          cors: true
      - http:
          path: v1/authority/list/
          method: delete
          cors: true
      - http:
          path: v1/plan/
          method: get
          cors: true
      - http:
          path: v1/plan/
          method: post
          cors: true
      - http:
          path: v1/plan/
          method: delete
          cors: true
      - http:
          path: v1/plan/list/
          method: get
          cors: true
      - http:
          path: v1/group/
          method: get
          cors: true
      - http:
          path: v1/group/
          method: post
          cors: true
      - http:
          path: v1/group/
          method: delete
          cors: true
      - http:
          path: v1/group/list/
          method: get
          cors: true
      - http:
          path: v1/user/
          method: get
          cors: true
      - http:
          path: v1/user/
          method: post
          cors: true
      - http:
          path: v1/user/
          method: delete
          cors: true
      - http:
          path: v1/user/list/
          method: get
          cors: true
      - http:
          path: v1/receipt/
          method: get
          cors: true
      - http:
          path: v1/receipt/
          method: post
          cors: true
      - http:
          path: v1/receipt/
          method: delete
          cors: true
      - http:
          path: v1/receipt/list/
          method: get
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  # - ${file(./templates/iam.yml)}
  - ${file(./templates/dynamodb.yml)}
